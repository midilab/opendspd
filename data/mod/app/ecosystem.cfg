# apps registration
# LOOPERS
[giada]
bin: /usr/bin/giada
extension: .gprj
audio_input: "Giada:inport 0, Giada:inport 1"
audio_output: "Giada:outport 0, Giada:outport 1"
#realtime: 0

[luppp]
bin: /usr/bin/luppp
extension: .luppp
#audio_input: "Luppp:master_in_left, Luppp:master_in_right"
#audio_output: "Luppp:master_left, Luppp:master_right"
#realtime: 0

# DJING
[mixxx]
bin: /usr/bin/mixxx
# mixxx consume memory until the dead without limitig memory
limits: --memlock=65536
audio_output: "Mixxx:out_0, Mixxx:out_1"
midi_input: "alsa_midi:Midi\ Through\ Port-0\ \(in\)"
#realtime: 0

[xwax]
bin: /usr/bin/xwax
args: -j xwax
#realtime: 0
#xwax:xwax_timecode_L
#xwax:xwax_playback_L
#xwax:xwax_timecode_R
#xwax:xwax_playback_R
#xwax-01:xwax_timecode_L
#xwax-01:xwax_playback_L
#xwax-01:xwax_timecode_R
#xwax-01:xwax_playback_R

# DAWS
[lmms]
bin: /usr/bin/lmms
audio_output: "lmms:master\ out\ L1, lmms:master\ out\ R1"
midi_input: "lmms:MIDI in"

[hydrogen]
bin: /usr/bin/hydrogen
extension: .h2song
audio_output: "Hydrogen:out_L, Hydrogen:out_R"
midi_input: "Hydrogen-midi:RX"
midi_output: "Hydrogen-midi:TX"

[qtractor]
bin: /usr/bin/qtractor
audio_input: "Qtractor:Master/in_1, Qtractor:Master/in_2"
audio_output: "Qtractor:Master/out_1, Qtractor:Master/out_2"
midi_input: "alsa_midi:Qtractor\ Master\ \(in\)"
midi_output: "alsa_midi:Qtractor\ Master\ \(out\)"
#realtime: 0

[non-daw]
bin: /usr/bin/non-daw
audio_input: "Non-Timeline:(.*)/in-(.*)"
audio_output: "Non-Timeline:(.*)/out-(.*)"
# on demand
#Non-Timeline:[track_name]/in-1
#Non-Timeline:[track_name]/out-1
#Non-Timeline:Bass/in-1
#Non-Timeline:Bass/out-1
#Non-Timeline:Drums/in-1
#Non-Timeline:Drums/out-1
#realtime: 0

# MODULAR SYNTHESIS
[carla]
bin: /usr/bin/carla
extension: .carxp
#audio_input: "Carla:audio-in1, Carla:audio-in2"
#audio_output: "Carla:audio-out1, Carla:audio-out2"
#midi_input: "Carla:events-in"
#midi_output: "Carla:events-out"
#realtime: 0

[carla-rack]
bin: /usr/bin/carla-rack
extension: .carxp
audio_input: "Carla:audio-in1, Carla:audio-in2"
audio_output: "Carla:audio-out1, Carla:audio-out2"
midi_input: "Carla:events-in"
midi_output: "Carla:events-out"
#realtime: 0

[ingen]
bin: /usr/bin/ingen
#args: -eg -n <id> -S /tmp/ingen-<id>.sock
args: -eg
#project_args: --graph-directory=
extension: .ingen
audio_input: "ingen:audio_in_1, ingen:audio_in_2, ingen:audio_in_3, ingen:audio_in_4, ingen:audio_in_5, ingen:audio_in_6, ingen:audio_in_7, ingen:audio_in_8"
audio_output: "ingen:audio_out_1, ingen:audio_out_2, ingen:audio_out_3, ingen:audio_out_4, ingen:audio_out_5, ingen:audio_out_6, ingen:audio_out_7, ingen:audio_out_8"
midi_output: "ingen:notify, ingen:event_out_1, ingen:event_out_2, ingen:event_out_3, ingen:event_out_4"
midi_input: "ingen:control, ingen:event_in_1, ingen:event_in_2, ingen:event_in_3, ingen:event_in_4"
#realtime: 0

[ingen-server]
bin: /usr/bin/ingen
#args: -e -n <id> -S /tmp/ingen-<id>.sock
args: -e
#project_args: --graph-directory=
extension: .ingen
audio_input: "ingen:audio_in_1, ingen:audio_in_2, ingen:audio_in_3, ingen:audio_in_4, ingen:audio_in_5, ingen:audio_in_6, ingen:audio_in_7, ingen:audio_in_8"
audio_output: "ingen:audio_out_1, ingen:audio_out_2, ingen:audio_out_3, ingen:audio_out_4, ingen:audio_out_5, ingen:audio_out_6, ingen:audio_out_7, ingen:audio_out_8"
midi_output: "ingen:notify, ingen:event_out_1, ingen:event_out_2, ingen:event_out_3, ingen:event_out_4"
midi_input: "ingen:control, ingen:event_in_1, ingen:event_in_2, ingen:event_in_3, ingen:event_in_4"
#realtime: 0

[ecasound]
bin: /usr/bin/ecasound
args: -C
project_arg: -s
audio_input: "mixer:channel_1, mixer:channel_2, mixer:channel_3, mixer:channel_4, mixer:return_1_1, mixer:return_1_2, mixer:return_2_1, mixer:return_2_2"
audio_output: "mixer:out_1, mixer:out_2, mixer:send_1_1, mixer:send_1_2, mixer:send_2_1, mixer:send_2_2"
midi_input: "alsa_midi:ecasound\ \(in\)"
midi_output: "alsa_midi:ecasound\ \(out\)"
#realtime: 0

# TRACKERS
[sunvox]
bin: /usr/bin/sunvox
extension: .sunvox
audio_input: "SunVox:Left In, SunVox:Right In"
audio_output: "SunVox:Left Out, SunVox:Right Out"
midi_input: "SunVox:Keyboard1, SunVox:Keyboard2, SunVox:Keyboard3, SunVox:Keyboard4"
#midi_map: /mod/sunvox.map
#ocs_map:

[sunvox-lofi]
bin: /usr/bin/sunvox_lofi
extension: .sunvox
audio_input: "SunVox:Left In, SunVox:Right In"
audio_output: "SunVox:Left Out, SunVox:Right Out"
midi_input: "SunVox:Keyboard1, SunVox:Keyboard2, SunVox:Keyboard3, SunVox:Keyboard4"

[milkytracker]
bin: /usr/bin/milkytracker
extension: .xm
args: -nosplash
audio_output: "Milkytracker:Left, Milkytracker:Right"
midi_input: "alsa_midi:RtMidi\ Input\ Client\ RtMidi\ Input\ \(in\)"
#midi_map: /mod/milkytracker.map
#ocs_map:

# DSP Programming
[puredata]
bin: /usr/bin/pd
extension: .pd
args: -jack
audio_input: "pure_data:input0, pure_data:input1"
audio_output: "pure_data:output0, pure_data:output1"

# VIDEO PROCESSING
[lebiniou]
bin: /usr/bin/lebiniou
args: -i jackaudio -o GL -f
project_arg: -t
audio_input: "lebiniou:input_0, lebiniou:input_1"
#realtime: -20

[projectm]
bin: /usr/bin/projectMSDL
#midi_map: /app/projectm/midi.map
#realtime: -20

[xjadeo]
bin: /usr/bin/xjadeo
#realtime: 0

[vlc]
bin: /usr/bin/vlc
audio_output: "vlc(.*):(.*)out_1, vlc(.*):(.*)out_2"
#realtime: 0

# HID
[input2midi]
bin: /usr/bin/input2midi
#realtime: 0

# System Audio router and MIDI splitter
[opendsp]
midi_input: "midiRT:out_1"
midi_output: "midiRT:out_1, midiRT:out_2, midiRT:out_3, midiRT:out_4, midiRT:out_5, midiRT:out_6, midiRT:out_7, midiRT:out_8, midiRT:out_9, midiRT:out_10, midiRT:out_11, midiRT:out_12, midiRT:out_13, midiRT:out_14, midiRT:out_15, midiRT:out_16"
audio_input: "system:playback_1, system:playback_2"
audio_output: "system:capture_1, system:capture_2"
